<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Aayush Agrawal</title>
<link>https://aayushmnit.github.io/blog.html</link>
<atom:link href="https://aayushmnit.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description>Aayush's personal website</description>
<generator>quarto-1.2.124</generator>
<lastBuildDate>Sun, 17 Mar 2019 07:00:00 GMT</lastBuildDate>
<item>
  <title>Finding similar images using Deep learning and Locality Sensitive Hashing</title>
  <dc:creator>Aayush Agrawal</dc:creator>
  <link>https://aayushmnit.github.io/posts/2019-03-17-Finding_similar_images_using_Deep_learning_and_Locality_Sensitive_Hashing/index.html</link>
  <description><![CDATA[ 



<p>Blog Transferred to <a href="https://towardsdatascience.com/finding-similar-images-using-deep-learning-and-locality-sensitive-hashing-9528afee02f5">Medium.com</a>.</p>



 ]]></description>
  <category>Deep Learning</category>
  <category>FastAI</category>
  <category>Pytorch</category>
  <category>Vision</category>
  <guid>https://aayushmnit.github.io/posts/2019-03-17-Finding_similar_images_using_Deep_learning_and_Locality_Sensitive_Hashing/index.html</guid>
  <pubDate>Sun, 17 Mar 2019 07:00:00 GMT</pubDate>
  <media:content url="https://aayushmnit.github.io/posts/2019-03-17-Finding_similar_images_using_Deep_learning_and_Locality_Sensitive_Hashing/similar.png" medium="image" type="image/png" height="99" width="144"/>
</item>
<item>
  <title>Real-time Multi-Facial attribute detection using computer vision and deep learning with FastAI and OpenCV</title>
  <dc:creator>Aayush Agrawal</dc:creator>
  <link>https://aayushmnit.github.io/posts/2019-02-17-Multi_Facial_attribute_detection_using_FastAI_and_OpenCV/index.html</link>
  <description><![CDATA[ 



<p>Blog Transferred to <a href="https://medium.com/@aayushmnit/real-time-multi-facial-attribute-detection-using-transfer-learning-and-haar-cascades-with-fastai-47ff59e36df0">Medium.com</a>.</p>



 ]]></description>
  <category>Deep Learning</category>
  <category>FastAI</category>
  <category>Pytorch</category>
  <category>Vision</category>
  <category>Video</category>
  <guid>https://aayushmnit.github.io/posts/2019-02-17-Multi_Facial_attribute_detection_using_FastAI_and_OpenCV/index.html</guid>
  <pubDate>Sun, 17 Feb 2019 08:00:00 GMT</pubDate>
  <media:content url="https://aayushmnit.github.io/posts/2019-02-17-Multi_Facial_attribute_detection_using_FastAI_and_OpenCV/face.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>MultiLayer Perceptron using Fastai and Pytorch</title>
  <dc:creator>Aayush Agrawal</dc:creator>
  <link>https://aayushmnit.github.io/posts/2019-01-05-Multi_Layer_perceptron_using_Fastai_and_Pytorch/index.html</link>
  <description><![CDATA[ 



<p>Blog Transferred to <a href="https://medium.com/@aayushmnit/multi-layer-perceptron-usingfastai-and-pytorch-9e401dd288b8">Medium.com</a>.</p>



 ]]></description>
  <category>Deep Learning</category>
  <category>FastAI</category>
  <category>Pytorch</category>
  <category>Vision</category>
  <guid>https://aayushmnit.github.io/posts/2019-01-05-Multi_Layer_perceptron_using_Fastai_and_Pytorch/index.html</guid>
  <pubDate>Sat, 05 Jan 2019 08:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/aayushmnit/Deep_learning_explorations/master/1_MLP_from_scratch/single_layer_mlp.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Leaf Disease detection by Tranfer learning using FastAI V1 library</title>
  <dc:creator>Aayush Agrawal</dc:creator>
  <link>https://aayushmnit.github.io/posts/2018-10-28-Leaf_Disease_detection_by_Tranfer_learning_using_FastAI_V1_library/index.html</link>
  <description><![CDATA[ 



<p>Blog Transferred to <a href="https://towardsdatascience.com/transfer-learning-using-the-fastai-library-d686b238213e">Medium.com</a>.</p>



 ]]></description>
  <category>Deep Learning</category>
  <category>FastAI</category>
  <category>Vision</category>
  <guid>https://aayushmnit.github.io/posts/2018-10-28-Leaf_Disease_detection_by_Tranfer_learning_using_FastAI_V1_library/index.html</guid>
  <pubDate>Sun, 28 Oct 2018 07:00:00 GMT</pubDate>
  <media:content url="https://aayushmnit.github.io/posts/2018-10-28-Leaf_Disease_detection_by_Tranfer_learning_using_FastAI_V1_library/leaf_classification.png" medium="image" type="image/png" height="99" width="144"/>
</item>
<item>
  <title>Multi-Layer perceptron using Tensorflow</title>
  <dc:creator>Aayush Agrawal</dc:creator>
  <link>https://aayushmnit.github.io/posts/2018-09-12-Multi_Layer_perceptron_using_Tensorflow/index.html</link>
  <description><![CDATA[ 



<p>Blog Transferred to <a href="https://medium.com/@aayushmnit/multi-layer-perceptron-using-tensorflow-9f3e218a4809">Medium.com</a>.</p>



 ]]></description>
  <category>Machine Learning</category>
  <category>Deep Learning</category>
  <guid>https://aayushmnit.github.io/posts/2018-09-12-Multi_Layer_perceptron_using_Tensorflow/index.html</guid>
  <pubDate>Wed, 12 Sep 2018 07:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/aayushmnit/Deep_learning_explorations/master/1_MLP_from_scratch/single_layer_mlp.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Building Neural Network from scratch</title>
  <dc:creator>Aayush Agrawal</dc:creator>
  <link>https://aayushmnit.github.io/posts/2018-06-03-Building_neural_network_from_scratch/index.html</link>
  <description><![CDATA[ 



<p>In this notebook, we are going to build a neural network(multilayer perceptron) using numpy and successfully train it to recognize digits in the image. Deep learning is a vast topic, but we got to start somewhere, so let’s start with the very basics of a neural network which is Multilayer Perceptron. You can find the same blog in notebook version <a href="https://github.com/aayushmnit/Deep_learning_explorations/tree/master/1_MLP_from_scratch">here</a>.</p>
<section id="what-is-a-neural-network" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-neural-network">What is a neural network?</h2>
<p>A neural network is a type of machine learning model which is inspired by our neurons in the brain where many neurons are connected with many other neurons to translate an input to an output (simple right?). Mostly we can look at any machine learning model and think of it as a function which takes an input and produces the desired output; it’s the same with a neural network.</p>
</section>
<section id="what-is-a-multi-layer-perceptron" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-multi-layer-perceptron">What is a Multi layer perceptron?</h2>
Multi-layer perceptron is a type of network where multiple layers of a group of perceptron are stacked together to make a model. Before we jump into the concept of a layer and multiple perceptrons, let’s start with the building block of this network which is a perceptron. Think of perceptron/neuron as a linear model which takes multiple inputs and produce an output. In our case perceptron is a linear model which takes a bunch of inputs multiply them with weights and add a bias term to generate an output.<br> <img src="https://aayushmnit.github.io/posts/2018-06-03-Building_neural_network_from_scratch/eq_perceptron.png" align="center"> <br> <img src="https://aayushmnit.github.io/posts/2018-06-03-Building_neural_network_from_scratch/https:/raw.githubusercontent.com/aayushmnit/Deep_learning_explorations/master/1_MLP_from_scratch/perceptron.png" align="center">
<center>
Fig 1: Perceptron image
</center>
<br>
<div data-align="right">
Image credit=https://commons.wikimedia.org/wiki/File:Perceptron.png/
</div>
Now, if we stack a bunch of these perceptrons together, it becomes a hidden layer which is also known as a Dense layer in modern deep learning terminology. <br> <strong>Dense layer,</strong> <img src="https://aayushmnit.github.io/posts/2018-06-03-Building_neural_network_from_scratch/eq_dense.png"> <br> <em>Note that bias term is now a vector and W is a weight matrix</em> <br> <img src="https://aayushmnit.github.io/posts/2018-06-03-Building_neural_network_from_scratch/https:/raw.githubusercontent.com/aayushmnit/Deep_learning_explorations/master/1_MLP_from_scratch/single_layer_mlp.png" align="center">
<center>
Fig: Single dense layer perceptron network
</center>
<br>
<div data-align="right">
Image credit=http://www.texample.net/tikz/examples/neural-network/
</div>
<p>Now we understand dense layer let’s add a bunch of them, and that network becomes a multi-layer perceptron network.</p>
<img src="https://aayushmnit.github.io/posts/2018-06-03-Building_neural_network_from_scratch/https:/raw.githubusercontent.com/aayushmnit/Deep_learning_explorations/master/1_MLP_from_scratch/multi_layer_mlp.png" align="center">
<center>
Fig: Multi layer perceptron network
</center>
<br>
<div data-align="right">
Image credit=http://pubs.sciepub.com/ajmm/3/3/1/figure/2s
</div>
<p>If you have noticed our dense layer, only have linear functions, and any combination of linear function only results in the linear output. As we want our MLP to be flexible and learn non-linear decision boundaries, we also need to introduce non-linearity into the network. We achieve the task of introducing non-linearity by adding activation function. There are various kinds of activation function which can be used, but we will be implementing Rectified Linear Units(ReLu) which is one of the popular activation function. ReLU function is a simple function which is zero for any input value below zero and the same value for values greater than zero. <br> <strong>ReLU function</strong> <img src="https://aayushmnit.github.io/posts/2018-06-03-Building_neural_network_from_scratch/eq_relu.png"> <br> Now, we understand dense layer and also understand the purpose of activation function, the only thing left is training the network. For training a neural network we need to have a loss function and every layer should have a <strong>feed-forward loop</strong> and <strong>backpropagation loop</strong>. Feedforward loop takes an input and generates output for making a prediction and backpropagation loop helps in training the model by adjusting weights in the layer to lower the output loss. In backpropagation, the weight update is done by using backpropagated gradients using the chain rule and optimized using an optimization algorithm. In our case, we will be using SGD(stochastic gradient descent). If you don’t understand the concept of gradient weight updates and SGD, I recommend you to watch <a href="https://www.coursera.org/ml">week 1 of Machine learning by Andrew NG lectures</a>.</p>
<p>So, to summarize a neural network needs few building blocks</p>
<ul>
<li><strong>Dense layer</strong> - a fully-connected layer, <img src="https://aayushmnit.github.io/posts/2018-06-03-Building_neural_network_from_scratch/eq_dense.png"></li>
<li><strong>ReLU layer</strong> (or any other activation function to introduce non-linearity)</li>
<li><strong>Loss function</strong> - (crossentropy in case of multi-class classification problem)</li>
<li><strong>Backprop algorithm</strong> - a stochastic gradient descent with backpropageted gradients</li>
</ul>
<p>Let’s approach them one at a time.</p>
</section>
<section id="coding-starts-here" class="level2">
<h2 class="anchored" data-anchor-id="coding-starts-here">Coding Starts here:</h2>
<p>Let’s start by importing some libraires required for creating our neural network.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> __future__ <span class="im" style="color: #00769E;">import</span> print_function</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np <span class="co" style="color: #5E5E5E;">## For numerical python</span></span>
<span id="cb1-3">np.random.seed(<span class="dv" style="color: #AD0000;">42</span>)</span></code></pre></div>
<p>Every layer will have a forward pass and backpass implementation. Let’s create a main class layer which can do a forward pass <em>.forward()</em> and Backward pass <em>.backward().</em></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">class</span> Layer:</span>
<span id="cb2-2">    </span>
<span id="cb2-3">    <span class="co" style="color: #5E5E5E;">#A building block. Each layer is capable of performing two things:</span></span>
<span id="cb2-4"></span>
<span id="cb2-5">    <span class="co" style="color: #5E5E5E;">#- Process input to get output:           output = layer.forward(input)</span></span>
<span id="cb2-6">    </span>
<span id="cb2-7">    <span class="co" style="color: #5E5E5E;">#- Propagate gradients through itself:    grad_input = layer.backward(input, grad_output)</span></span>
<span id="cb2-8">    </span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;">#Some layers also have learnable parameters which they update during layer.backward.</span></span>
<span id="cb2-10">    </span>
<span id="cb2-11">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-12">        <span class="co" style="color: #5E5E5E;"># Here we can initialize layer parameters (if any) and auxiliary stuff.</span></span>
<span id="cb2-13">        <span class="co" style="color: #5E5E5E;"># A dummy layer does nothing</span></span>
<span id="cb2-14">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb2-15">    </span>
<span id="cb2-16">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, <span class="bu" style="color: null;">input</span>):</span>
<span id="cb2-17">        <span class="co" style="color: #5E5E5E;"># Takes input data of shape [batch, input_units], returns output data [batch, output_units]</span></span>
<span id="cb2-18">        </span>
<span id="cb2-19">        <span class="co" style="color: #5E5E5E;"># A dummy layer just returns whatever it gets as input.</span></span>
<span id="cb2-20">        <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">input</span></span>
<span id="cb2-21"></span>
<span id="cb2-22">    <span class="kw" style="color: #003B4F;">def</span> backward(<span class="va" style="color: #111111;">self</span>, <span class="bu" style="color: null;">input</span>, grad_output):</span>
<span id="cb2-23">        <span class="co" style="color: #5E5E5E;"># Performs a backpropagation step through the layer, with respect to the given input.</span></span>
<span id="cb2-24">        </span>
<span id="cb2-25">        <span class="co" style="color: #5E5E5E;"># To compute loss gradients w.r.t input, we need to apply chain rule (backprop):</span></span>
<span id="cb2-26">        </span>
<span id="cb2-27">        <span class="co" style="color: #5E5E5E;"># d loss / d x  = (d loss / d layer) * (d layer / d x)</span></span>
<span id="cb2-28">        </span>
<span id="cb2-29">        <span class="co" style="color: #5E5E5E;"># Luckily, we already receive d loss / d layer as input, so you only need to multiply it by d layer / d x.</span></span>
<span id="cb2-30">        </span>
<span id="cb2-31">        <span class="co" style="color: #5E5E5E;"># If our layer has parameters (e.g. dense layer), we also need to update them here using d loss / d layer</span></span>
<span id="cb2-32">        </span>
<span id="cb2-33">        <span class="co" style="color: #5E5E5E;"># The gradient of a dummy layer is precisely grad_output, but we'll write it more explicitly</span></span>
<span id="cb2-34">        num_units <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">input</span>.shape[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb2-35">        </span>
<span id="cb2-36">        d_layer_d_input <span class="op" style="color: #5E5E5E;">=</span> np.eye(num_units)</span>
<span id="cb2-37">        </span>
<span id="cb2-38">        <span class="cf" style="color: #003B4F;">return</span> np.dot(grad_output, d_layer_d_input) <span class="co" style="color: #5E5E5E;"># chain rule</span></span></code></pre></div>
<section id="nonlinearity-relu-layer" class="level3">
<h3 class="anchored" data-anchor-id="nonlinearity-relu-layer">Nonlinearity ReLU layer</h3>
<p>This is the simplest layer you can get: it simply applies a nonlinearity to each element of your network.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">class</span> ReLU(Layer):</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-3">        <span class="co" style="color: #5E5E5E;"># ReLU layer simply applies elementwise rectified linear unit to all inputs</span></span>
<span id="cb3-4">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb3-5">    </span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, <span class="bu" style="color: null;">input</span>):</span>
<span id="cb3-7">        <span class="co" style="color: #5E5E5E;"># Apply elementwise ReLU to [batch, input_units] matrix</span></span>
<span id="cb3-8">        relu_forward <span class="op" style="color: #5E5E5E;">=</span> np.maximum(<span class="dv" style="color: #AD0000;">0</span>,<span class="bu" style="color: null;">input</span>)</span>
<span id="cb3-9">        <span class="cf" style="color: #003B4F;">return</span> relu_forward</span>
<span id="cb3-10">    </span>
<span id="cb3-11">    <span class="kw" style="color: #003B4F;">def</span> backward(<span class="va" style="color: #111111;">self</span>, <span class="bu" style="color: null;">input</span>, grad_output):</span>
<span id="cb3-12">        <span class="co" style="color: #5E5E5E;"># Compute gradient of loss w.r.t. ReLU input</span></span>
<span id="cb3-13">        relu_grad <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">input</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-14">        <span class="cf" style="color: #003B4F;">return</span> grad_output<span class="op" style="color: #5E5E5E;">*</span>relu_grad </span></code></pre></div>
</section>
<section id="dense-layer" class="level3">
<h3 class="anchored" data-anchor-id="dense-layer">Dense layer</h3>
<p>Now let’s build something more complicated. Unlike nonlinearity, a dense layer actually has something to learn.</p>
<p>A dense layer applies affine transformation. In a vectorized form, it can be described as:<br> <img src="https://aayushmnit.github.io/posts/2018-06-03-Building_neural_network_from_scratch/eq_dense.png"></p>
<p>Where * X is an object-feature matrix of shape [batch_size, num_features], * W is a weight matrix [num_features, num_outputs] * and b is a vector of num_outputs biases.</p>
<p>Both W and b are initialized during layer creation and updated each time backward is called. Note that we are using <strong>Xavier initialization</strong> which is a trick to train our model to converge faster <a href="http://andyljones.tumblr.com/post/110998971763/an-explanation-of-xavier-initialization">read more</a>. Instead of initializing our weights with small numbers which are distributed randomly we initialize our weights with mean zero and variance of 2/(number of inputs + number of outputs)</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">class</span> Dense(Layer):</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, input_units, output_units, learning_rate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>):</span>
<span id="cb4-3">        <span class="co" style="color: #5E5E5E;"># A dense layer is a layer which performs a learned affine transformation:</span></span>
<span id="cb4-4">        <span class="co" style="color: #5E5E5E;"># f(x) = &lt;W*x&gt; + b</span></span>
<span id="cb4-5">        </span>
<span id="cb4-6">        <span class="va" style="color: #111111;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;">=</span> learning_rate</span>
<span id="cb4-7">        <span class="va" style="color: #111111;">self</span>.weights <span class="op" style="color: #5E5E5E;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>, </span>
<span id="cb4-8">                                        scale <span class="op" style="color: #5E5E5E;">=</span> np.sqrt(<span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">/</span>(input_units<span class="op" style="color: #5E5E5E;">+</span>output_units)), </span>
<span id="cb4-9">                                        size <span class="op" style="color: #5E5E5E;">=</span> (input_units,output_units))</span>
<span id="cb4-10">        <span class="va" style="color: #111111;">self</span>.biases <span class="op" style="color: #5E5E5E;">=</span> np.zeros(output_units)</span>
<span id="cb4-11">        </span>
<span id="cb4-12">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>,<span class="bu" style="color: null;">input</span>):</span>
<span id="cb4-13">        <span class="co" style="color: #5E5E5E;"># Perform an affine transformation:</span></span>
<span id="cb4-14">        <span class="co" style="color: #5E5E5E;"># f(x) = &lt;W*x&gt; + b</span></span>
<span id="cb4-15">        </span>
<span id="cb4-16">        <span class="co" style="color: #5E5E5E;"># input shape: [batch, input_units]</span></span>
<span id="cb4-17">        <span class="co" style="color: #5E5E5E;"># output shape: [batch, output units]</span></span>
<span id="cb4-18">        </span>
<span id="cb4-19">        <span class="cf" style="color: #003B4F;">return</span> np.dot(<span class="bu" style="color: null;">input</span>,<span class="va" style="color: #111111;">self</span>.weights) <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.biases</span>
<span id="cb4-20">    </span>
<span id="cb4-21">    <span class="kw" style="color: #003B4F;">def</span> backward(<span class="va" style="color: #111111;">self</span>,<span class="bu" style="color: null;">input</span>,grad_output):</span>
<span id="cb4-22">        <span class="co" style="color: #5E5E5E;"># compute d f / d x = d f / d dense * d dense / d x</span></span>
<span id="cb4-23">        <span class="co" style="color: #5E5E5E;"># where d dense/ d x = weights transposed</span></span>
<span id="cb4-24">        grad_input <span class="op" style="color: #5E5E5E;">=</span> np.dot(grad_output, <span class="va" style="color: #111111;">self</span>.weights.T)</span>
<span id="cb4-25">        </span>
<span id="cb4-26">        <span class="co" style="color: #5E5E5E;"># compute gradient w.r.t. weights and biases</span></span>
<span id="cb4-27">        grad_weights <span class="op" style="color: #5E5E5E;">=</span> np.dot(<span class="bu" style="color: null;">input</span>.T, grad_output)</span>
<span id="cb4-28">        grad_biases <span class="op" style="color: #5E5E5E;">=</span> grad_output.mean(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)<span class="op" style="color: #5E5E5E;">*</span><span class="bu" style="color: null;">input</span>.shape[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb4-29">        </span>
<span id="cb4-30">        <span class="cf" style="color: #003B4F;">assert</span> grad_weights.shape <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">self</span>.weights.shape <span class="kw" style="color: #003B4F;">and</span> grad_biases.shape <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">self</span>.biases.shape</span>
<span id="cb4-31">        </span>
<span id="cb4-32">        <span class="co" style="color: #5E5E5E;"># Here we perform a stochastic gradient descent step. </span></span>
<span id="cb4-33">        <span class="va" style="color: #111111;">self</span>.weights <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.weights <span class="op" style="color: #5E5E5E;">-</span> <span class="va" style="color: #111111;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;">*</span> grad_weights</span>
<span id="cb4-34">        <span class="va" style="color: #111111;">self</span>.biases <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.biases <span class="op" style="color: #5E5E5E;">-</span> <span class="va" style="color: #111111;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;">*</span> grad_biases</span>
<span id="cb4-35">        </span>
<span id="cb4-36">        <span class="cf" style="color: #003B4F;">return</span> grad_input</span></code></pre></div>
</section>
<section id="the-loss-function" class="level3">
<h3 class="anchored" data-anchor-id="the-loss-function">The loss function</h3>
<p>Since we want to predict probabilities, it would be logical for us to define softmax nonlinearity on top of our network and compute loss given predicted probabilities. However, there is a better way to do so.</p>
<p>If we write down the expression for crossentropy as a function of softmax logits (a), you’ll see: <br></p>
<p><img src="https://aayushmnit.github.io/posts/2018-06-03-Building_neural_network_from_scratch/loss_1.png"> <br> If we take a closer look, we’ll see that it can be rewritten as: <br></p>
<p><img src="https://aayushmnit.github.io/posts/2018-06-03-Building_neural_network_from_scratch/loss_2.png"> <br> It’s called Log-softmax and it’s better than naive log(softmax(a)) in all aspects: * Better numerical stability * Easier to get derivative right * Marginally faster to compute</p>
<p>So why not just use log-softmax throughout our computation and never actually bother to estimate probabilities.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">def</span> softmax_crossentropy_with_logits(logits,reference_answers):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;"># Compute crossentropy from logits[batch,n_classes] and ids of correct answers</span></span>
<span id="cb5-3">    logits_for_answers <span class="op" style="color: #5E5E5E;">=</span> logits[np.arange(<span class="bu" style="color: null;">len</span>(logits)),reference_answers]</span>
<span id="cb5-4">    </span>
<span id="cb5-5">    xentropy <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span> logits_for_answers <span class="op" style="color: #5E5E5E;">+</span> np.log(np.<span class="bu" style="color: null;">sum</span>(np.exp(logits),axis<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb5-6">    </span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;">return</span> xentropy</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="kw" style="color: #003B4F;">def</span> grad_softmax_crossentropy_with_logits(logits,reference_answers):</span>
<span id="cb5-10">    <span class="co" style="color: #5E5E5E;"># Compute crossentropy gradient from logits[batch,n_classes] and ids of correct answers</span></span>
<span id="cb5-11">    ones_for_answers <span class="op" style="color: #5E5E5E;">=</span> np.zeros_like(logits)</span>
<span id="cb5-12">    ones_for_answers[np.arange(<span class="bu" style="color: null;">len</span>(logits)),reference_answers] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-13">    </span>
<span id="cb5-14">    softmax <span class="op" style="color: #5E5E5E;">=</span> np.exp(logits) <span class="op" style="color: #5E5E5E;">/</span> np.exp(logits).<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>,keepdims<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-15">    </span>
<span id="cb5-16">    <span class="cf" style="color: #003B4F;">return</span> (<span class="op" style="color: #5E5E5E;">-</span> ones_for_answers <span class="op" style="color: #5E5E5E;">+</span> softmax) <span class="op" style="color: #5E5E5E;">/</span> logits.shape[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
</section>
<section id="full-network" class="level3">
<h3 class="anchored" data-anchor-id="full-network">Full network</h3>
<p>Now let’s combine what we’ve just built into a working neural network. As I have told earlier, we are going to use MNIST data of handwritten digit for our example. Fortunately, Keras already have it in the numpy array format, so let’s import it!.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> keras</span>
<span id="cb6-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb6-3"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">def</span> load_dataset(flatten<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>):</span>
<span id="cb6-6">    (X_train, y_train), (X_test, y_test) <span class="op" style="color: #5E5E5E;">=</span> keras.datasets.mnist.load_data()</span>
<span id="cb6-7"></span>
<span id="cb6-8">    <span class="co" style="color: #5E5E5E;"># normalize x</span></span>
<span id="cb6-9">    X_train <span class="op" style="color: #5E5E5E;">=</span> X_train.astype(<span class="bu" style="color: null;">float</span>) <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.</span></span>
<span id="cb6-10">    X_test <span class="op" style="color: #5E5E5E;">=</span> X_test.astype(<span class="bu" style="color: null;">float</span>) <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">255.</span></span>
<span id="cb6-11"></span>
<span id="cb6-12">    <span class="co" style="color: #5E5E5E;"># we reserve the last 10000 training examples for validation</span></span>
<span id="cb6-13">    X_train, X_val <span class="op" style="color: #5E5E5E;">=</span> X_train[:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10000</span>], X_train[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10000</span>:]</span>
<span id="cb6-14">    y_train, y_val <span class="op" style="color: #5E5E5E;">=</span> y_train[:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10000</span>], y_train[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10000</span>:]</span>
<span id="cb6-15"></span>
<span id="cb6-16">    <span class="cf" style="color: #003B4F;">if</span> flatten:</span>
<span id="cb6-17">        X_train <span class="op" style="color: #5E5E5E;">=</span> X_train.reshape([X_train.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb6-18">        X_val <span class="op" style="color: #5E5E5E;">=</span> X_val.reshape([X_val.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb6-19">        X_test <span class="op" style="color: #5E5E5E;">=</span> X_test.reshape([X_test.shape[<span class="dv" style="color: #AD0000;">0</span>], <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb6-20"></span>
<span id="cb6-21">    <span class="cf" style="color: #003B4F;">return</span> X_train, y_train, X_val, y_val, X_test, y_test</span>
<span id="cb6-22"></span>
<span id="cb6-23">X_train, y_train, X_val, y_val, X_test, y_test <span class="op" style="color: #5E5E5E;">=</span> load_dataset(flatten<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb6-24"></span>
<span id="cb6-25"><span class="co" style="color: #5E5E5E;">## Let's look at some example</span></span>
<span id="cb6-26">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">6</span>,<span class="dv" style="color: #AD0000;">6</span>])</span>
<span id="cb6-27"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">4</span>):</span>
<span id="cb6-28">    plt.subplot(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>,i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-29">    plt.title(<span class="st" style="color: #20794D;">"Label: </span><span class="sc" style="color: #5E5E5E;">%i</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">%</span>y_train[i])</span>
<span id="cb6-30">    plt.imshow(X_train[i].reshape([<span class="dv" style="color: #AD0000;">28</span>,<span class="dv" style="color: #AD0000;">28</span>]),cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p><img src="https://aayushmnit.github.io/posts/2018-06-03-Building_neural_network_from_scratch/output_20_1.png" align="center"></p>
<p>We’ll define network as a list of layers, each applied on top of previous one. In this setting, computing predictions and training becomes trivial.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">network <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-2">network.append(Dense(X_train.shape[<span class="dv" style="color: #AD0000;">1</span>],<span class="dv" style="color: #AD0000;">100</span>))</span>
<span id="cb7-3">network.append(ReLU())</span>
<span id="cb7-4">network.append(Dense(<span class="dv" style="color: #AD0000;">100</span>,<span class="dv" style="color: #AD0000;">200</span>))</span>
<span id="cb7-5">network.append(ReLU())</span>
<span id="cb7-6">network.append(Dense(<span class="dv" style="color: #AD0000;">200</span>,<span class="dv" style="color: #AD0000;">10</span>))</span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> forward(network, X):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;"># Compute activations of all network layers by applying them sequentially.</span></span>
<span id="cb8-3">    <span class="co" style="color: #5E5E5E;"># Return a list of activations for each layer. </span></span>
<span id="cb8-4">    </span>
<span id="cb8-5">    activations <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb8-6">    <span class="bu" style="color: null;">input</span> <span class="op" style="color: #5E5E5E;">=</span> X</span>
<span id="cb8-7"></span>
<span id="cb8-8">    <span class="co" style="color: #5E5E5E;"># Looping through each layer</span></span>
<span id="cb8-9">    <span class="cf" style="color: #003B4F;">for</span> l <span class="kw" style="color: #003B4F;">in</span> network:</span>
<span id="cb8-10">        activations.append(l.forward(<span class="bu" style="color: null;">input</span>))</span>
<span id="cb8-11">        <span class="co" style="color: #5E5E5E;"># Updating input to last layer output</span></span>
<span id="cb8-12">        <span class="bu" style="color: null;">input</span> <span class="op" style="color: #5E5E5E;">=</span> activations[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb8-13">    </span>
<span id="cb8-14">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(activations) <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">len</span>(network)</span>
<span id="cb8-15">    <span class="cf" style="color: #003B4F;">return</span> activations</span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="kw" style="color: #003B4F;">def</span> predict(network,X):</span>
<span id="cb8-18">    <span class="co" style="color: #5E5E5E;"># Compute network predictions. Returning indices of largest Logit probability</span></span>
<span id="cb8-19"></span>
<span id="cb8-20">    logits <span class="op" style="color: #5E5E5E;">=</span> forward(network,X)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb8-21">    <span class="cf" style="color: #003B4F;">return</span> logits.argmax(axis<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb8-22"></span>
<span id="cb8-23"><span class="kw" style="color: #003B4F;">def</span> train(network,X,y):</span>
<span id="cb8-24">    <span class="co" style="color: #5E5E5E;"># Train our network on a given batch of X and y.</span></span>
<span id="cb8-25">    <span class="co" style="color: #5E5E5E;"># We first need to run forward to get all layer activations.</span></span>
<span id="cb8-26">    <span class="co" style="color: #5E5E5E;"># Then we can run layer.backward going from last to first layer.</span></span>
<span id="cb8-27">    <span class="co" style="color: #5E5E5E;"># After we have called backward for all layers, all Dense layers have already made one gradient step.</span></span>
<span id="cb8-28">    </span>
<span id="cb8-29">    </span>
<span id="cb8-30">    <span class="co" style="color: #5E5E5E;"># Get the layer activations</span></span>
<span id="cb8-31">    layer_activations <span class="op" style="color: #5E5E5E;">=</span> forward(network,X)</span>
<span id="cb8-32">    layer_inputs <span class="op" style="color: #5E5E5E;">=</span> [X]<span class="op" style="color: #5E5E5E;">+</span>layer_activations  <span class="co" style="color: #5E5E5E;">#layer_input[i] is an input for network[i]</span></span>
<span id="cb8-33">    logits <span class="op" style="color: #5E5E5E;">=</span> layer_activations[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb8-34">    </span>
<span id="cb8-35">    <span class="co" style="color: #5E5E5E;"># Compute the loss and the initial gradient</span></span>
<span id="cb8-36">    loss <span class="op" style="color: #5E5E5E;">=</span> softmax_crossentropy_with_logits(logits,y)</span>
<span id="cb8-37">    loss_grad <span class="op" style="color: #5E5E5E;">=</span> grad_softmax_crossentropy_with_logits(logits,y)</span>
<span id="cb8-38">    </span>
<span id="cb8-39">    <span class="co" style="color: #5E5E5E;"># Propagate gradients through the network</span></span>
<span id="cb8-40">    <span class="co" style="color: #5E5E5E;"># Reverse propogation as this is backprop</span></span>
<span id="cb8-41">    <span class="cf" style="color: #003B4F;">for</span> layer_index <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(network))[::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]:</span>
<span id="cb8-42">        layer <span class="op" style="color: #5E5E5E;">=</span> network[layer_index]</span>
<span id="cb8-43">        </span>
<span id="cb8-44">        loss_grad <span class="op" style="color: #5E5E5E;">=</span> layer.backward(layer_inputs[layer_index],loss_grad) <span class="co" style="color: #5E5E5E;">#grad w.r.t. input, also weight updates</span></span>
<span id="cb8-45">        </span>
<span id="cb8-46">    <span class="cf" style="color: #003B4F;">return</span> np.mean(loss)</span></code></pre></div>
</section>
<section id="training-loop" class="level3">
<h3 class="anchored" data-anchor-id="training-loop">Training loop</h3>
<p>We split data into minibatches, feed each such minibatch into the network and update weights. This training method is called a mini-batch stochastic gradient descent.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">from</span> tqdm <span class="im" style="color: #00769E;">import</span> trange</span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;">def</span> iterate_minibatches(inputs, targets, batchsize, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>):</span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(inputs) <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">len</span>(targets)</span>
<span id="cb9-4">    <span class="cf" style="color: #003B4F;">if</span> shuffle:</span>
<span id="cb9-5">        indices <span class="op" style="color: #5E5E5E;">=</span> np.random.permutation(<span class="bu" style="color: null;">len</span>(inputs))</span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;">for</span> start_idx <span class="kw" style="color: #003B4F;">in</span> trange(<span class="dv" style="color: #AD0000;">0</span>, <span class="bu" style="color: null;">len</span>(inputs) <span class="op" style="color: #5E5E5E;">-</span> batchsize <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, batchsize):</span>
<span id="cb9-7">        <span class="cf" style="color: #003B4F;">if</span> shuffle:</span>
<span id="cb9-8">            excerpt <span class="op" style="color: #5E5E5E;">=</span> indices[start_idx:start_idx <span class="op" style="color: #5E5E5E;">+</span> batchsize]</span>
<span id="cb9-9">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb9-10">            excerpt <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">slice</span>(start_idx, start_idx <span class="op" style="color: #5E5E5E;">+</span> batchsize)</span>
<span id="cb9-11">        <span class="cf" style="color: #003B4F;">yield</span> inputs[excerpt], targets[excerpt]</span></code></pre></div>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> clear_output</span>
<span id="cb10-2">train_log <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb10-3">val_log <span class="op" style="color: #5E5E5E;">=</span> []</span></code></pre></div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">25</span>):</span>
<span id="cb11-2"></span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;">for</span> x_batch,y_batch <span class="kw" style="color: #003B4F;">in</span> iterate_minibatches(X_train,y_train,batchsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>,shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>):</span>
<span id="cb11-4">        train(network,x_batch,y_batch)</span>
<span id="cb11-5">    </span>
<span id="cb11-6">    train_log.append(np.mean(predict(network,X_train)<span class="op" style="color: #5E5E5E;">==</span>y_train))</span>
<span id="cb11-7">    val_log.append(np.mean(predict(network,X_val)<span class="op" style="color: #5E5E5E;">==</span>y_val))</span>
<span id="cb11-8">    </span>
<span id="cb11-9">    clear_output()</span>
<span id="cb11-10">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Epoch"</span>,epoch)</span>
<span id="cb11-11">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Train accuracy:"</span>,train_log[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb11-12">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Val accuracy:"</span>,val_log[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb11-13">    plt.plot(train_log,label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train accuracy'</span>)</span>
<span id="cb11-14">    plt.plot(val_log,label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'val accuracy'</span>)</span>
<span id="cb11-15">    plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'best'</span>)</span>
<span id="cb11-16">    plt.grid()</span>
<span id="cb11-17">    plt.show()</span>
<span id="cb11-18">    </span></code></pre></div>
<pre><code>Epoch 24
Train accuracy: 1.0
Val accuracy: 0.9809</code></pre>
<p><img src="https://aayushmnit.github.io/posts/2018-06-03-Building_neural_network_from_scratch/output_27_1.png" align="center"></p>
<p>As we can see we have successfully trained a MLP which was purely written in numpy with high validation accuracy!</p>


</section>
</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Deep Learning</category>
  <guid>https://aayushmnit.github.io/posts/2018-06-03-Building_neural_network_from_scratch/index.html</guid>
  <pubDate>Sun, 03 Jun 2018 07:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/aayushmnit/Deep_learning_explorations/master/1_MLP_from_scratch/single_layer_mlp.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Solving business usecases by recommender system using lightFM</title>
  <dc:creator>Aayush Agrawal</dc:creator>
  <link>https://aayushmnit.github.io/posts/2018-04-17-Business_usecases_by_recommender_system_using_lightFM/index.html</link>
  <description><![CDATA[ 



<p>In this post, I am going to write about Recommender systems, how they are used in many e-commerce websites. The post will also cover about building simple recommender system models using Matrix Factorization algorithm using <a href="https://github.com/lyst/lightfm">lightFM</a> package and my <a href="https://github.com/aayushmnit/cookbook/blob/master/recsys.py">recommender system cookbook</a>. The post will focus on business use cases and simple implementations. The post only cover basic intuition around algorithms and will provide links to resources if you want to understand the math behind the algorithm.</p>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>I am an avid reader and a believer in open source education and continuously expand my knowledge around data science &amp; computer science using online courses, blogs, Github repositories and participating in data science competitions. While searching for quality content on the internet, I have come across various learning links which either focus on the implementation of the algorithm using specific data/modeling technique in ABC language or focus on business impact/results using the broad concept of a family of algorithms(like classification, forecasting, recommender systems etc.) but don’t go into details of how to do it. So the idea is to write some blogs which can combine both business use cases with codes &amp; algorithmic intuition to provide a holistic view of how data science is used in business scenarios. <br></p>
<p>As the world is becoming more digital, we are already getting used to a lot of personalized experience and the algorithm which help us achieve this falls in the family of recommender systems. Almost every web-based platform is using some recommender system to provide customized content. Following are the companies I admire the most. <img src="https://aayushmnit.github.io/posts/2018-04-17-Business_usecases_by_recommender_system_using_lightFM/admired_companies.PNG"></p>
</section>
<section id="what-is-personalization" class="level2">
<h2 class="anchored" data-anchor-id="what-is-personalization">What is personalization?</h2>
<p>Personalization is a technique of dynamically tailoring your content based on needs of each user. Simple examples of personalization could be movie recommendation on Netflix, personalized email targeting/re-targeting by e-commerce platforms, item recommendation on Amazon, etc. Personalization helps us achieve these four Rs - - <strong>Recognize:</strong> Know customer’s and prospects’ profiles, including demographics, geography, and expressed and shared interests. - <strong>Remember:</strong> Recall customers’ history, primarily how they act as expressed by what they browse and buy - <strong>Reach:</strong> Deliver the right promotion, content, recommendation for a customer based on actions, preferences, and interests - <strong>Relevance:</strong> Deliver personalization within the context of the digital experience based on who customers are, where they are located and what time of year it is</p>
<p><img src="https://aayushmnit.github.io/posts/2018-04-17-Business_usecases_by_recommender_system_using_lightFM/4r_personalization.PNG"></p>
</section>
<section id="why-personalization" class="level2">
<h2 class="anchored" data-anchor-id="why-personalization">Why personalization?</h2>
<p>Personalization has a lot of benefits for both users and companies. For users, it makes their life easy as they only get to see more relevant stuff to them (unless it’s an advertisement, even they are personalized). For business benefits are countless but here are few which I would like to mention - - <strong>Enhance customer experience:</strong> Personalization reduces the clutter and enhances the customer experience by showing relevant content - <strong>Cross-sell/ Up-sell opportunities:</strong> Relevant product offerings based on customer preferences can lead to increasing products visibility and eventually selling more products - <strong>Increased basket size:</strong> Personalized experience and targeting ultimately leads to increased basket size and frequent purchases - <strong>Increased customer loyalty:</strong> In the digital world, customer retention/loyalty is the most prominent problem faced by many companies as finding a replacement for a particular service is quite easy. According to a <a href="https://www.forbes.com/sites/shephyken/2017/10/29/personalized-customer-experience-increases-revenue-and-loyalty/#36e9f054bd61">Forbes article</a>, Forty-four percent of consumers say they will likely repeat after a personalized experience</p>
<p><img src="https://aayushmnit.github.io/posts/2018-04-17-Business_usecases_by_recommender_system_using_lightFM/personalization_benefits.PNG"></p>
</section>
<section id="introduction-to-matrix-factorization" class="level2">
<h2 class="anchored" data-anchor-id="introduction-to-matrix-factorization">Introduction to Matrix factorization</h2>
<p>Matrix factorization is one of the algorithms from recommender systems family and as the name suggests it factorize a matrix, i.e., decompose a matrix in two(or more) matrices such that once you multiply them you get your original matrix back. In case of the recommendation system, we will typically start with an interaction/rating matrix between users and items and matrix factorization algorithm will decompose this matrix in user and item feature matrix which is also known as embeddings. Example of interaction matrix would be user-movie ratings for movie recommender, user-product purchase flag for transaction data, etc. <br> <img src="https://aayushmnit.github.io/posts/2018-04-17-Business_usecases_by_recommender_system_using_lightFM/matrix_decomposition.png"></p>
<p><br> Typically user/item embeddings capture latent features about attributes of users and item respectively. Essentially, latent features are the representation of user/item in an arbitrary space which represents how a user rate a movie. In the example of a movie recommender, an example of user embedding might represent affinity of a user to watch serious kind of movie when the value of the latent feature is high and comedy type of movie when the value is low. Similarly, a movie latent feature may have a high value when the movie is more male driven and when it’s more female-driven the value is typically low. <br> <img src="https://aayushmnit.github.io/posts/2018-04-17-Business_usecases_by_recommender_system_using_lightFM/latent_feature.gif"></p>
<p>For more information on matrix factorization and factorization machines you can read these articles - <br> <a href="http://www.quuxlabs.com/blog/2010/09/matrix-factorization-a-simple-tutorial-and-implementation-in-python/">Matrix Factorization: A Simple Tutorial and Implementation in Python</a> <br> <a href="https://www.analyticsvidhya.com/blog/2018/01/factorization-machines/">Introductory Guide – Factorization Machines &amp; their application on huge datasets (with codes in Python)</a></p>
</section>
<section id="handon-building-recommender-system-using-lightfm-package-in-python" class="level2">
<h2 class="anchored" data-anchor-id="handon-building-recommender-system-using-lightfm-package-in-python">HandOn: Building recommender system using LightFM package in Python</h2>
<p>In the hands-on section, we will be building recommender system for different scenarios which we typically see in many companies using LightFM package and <a href="https://grouplens.org/datasets/movielens/">MovieLens</a> data. We are using <a href="http://files.grouplens.org/datasets/movielens/ml-latest-small.zip">small size data</a> which contains 100,000 ratings and 1,300 tag applications applied to 9,000 movies by 700 users</p>
<section id="data" class="level3">
<h3 class="anchored" data-anchor-id="data">Data</h3>
<p>Let’s start by importing data, <a href="https://github.com/aayushmnit/cookbook/blob/master/recsys.py">recommender system cookbook</a> and <a href="https://github.com/aayushmnit/cookbook/blob/master/generic_preprocessing.py">preprocessing cookbook</a> files for this hands-on section. I have written these reusable generic <a href="https://github.com/aayushmnit/cookbook">cookbook codes</a> to increase productivity and write clean/modular codes; you will see we can build a recommender system using 10-15 lines of code by using these cookbooks(do more with less!).</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Importing Libraries and cookbooks</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> recsys <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="co" style="color: #5E5E5E;">## recommender system cookbook</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> generic_preprocessing <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="co" style="color: #5E5E5E;">## pre-processing code</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> HTML <span class="co" style="color: #5E5E5E;">## Setting display options for Ipython Notebook</span></span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Importing rating data and having a look</span></span>
<span id="cb2-2">ratings <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'./ml-latest-small/ratings.csv'</span>)</span>
<span id="cb2-3">ratings.head()</span></code></pre></div>
<div>


<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
userId
</th>
<th>
movieId
</th>
<th>
rating
</th>
<th>
timestamp
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
1
</td>
<td>
31
</td>
<td>
2.5
</td>
<td>
1260759144
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1
</td>
<td>
1029
</td>
<td>
3.0
</td>
<td>
1260759179
</td>
</tr>
<tr>
<th>
2
</th>
<td>
1
</td>
<td>
1061
</td>
<td>
3.0
</td>
<td>
1260759182
</td>
</tr>
<tr>
<th>
3
</th>
<td>
1
</td>
<td>
1129
</td>
<td>
2.0
</td>
<td>
1260759185
</td>
</tr>
<tr>
<th>
4
</th>
<td>
1
</td>
<td>
1172
</td>
<td>
4.0
</td>
<td>
1260759205
</td>
</tr>
</tbody>

</table>
</div>
<p>As we can see rating data contain user id, movie id and a rating between 0.5 to 5 with a timestamp representing when the rating was given.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Importing movie data and having a look at first five columns</span></span>
<span id="cb3-2">movies <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'./ml-latest-small/movies.csv'</span>)</span>
<span id="cb3-3">movies.head()</span></code></pre></div>
<div>


<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
</th>
<th>
movieId
</th>
<th>
title
</th>
<th>
genres
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
1
</td>
<td>
Toy Story (1995)
</td>
<td>
Adventure|Animation|Children|Comedy|Fantasy
</td>
</tr>
<tr>
<th>
1
</th>
<td>
2
</td>
<td>
Jumanji (1995)
</td>
<td>
Adventure|Children|Fantasy
</td>
</tr>
<tr>
<th>
2
</th>
<td>
3
</td>
<td>
Grumpier Old Men (1995)
</td>
<td>
Comedy|Romance
</td>
</tr>
<tr>
<th>
3
</th>
<td>
4
</td>
<td>
Waiting to Exhale (1995)
</td>
<td>
Comedy|Drama|Romance
</td>
</tr>
<tr>
<th>
4
</th>
<td>
5
</td>
<td>
Father of the Bride Part II (1995)
</td>
<td>
Comedy
</td>
</tr>
</tbody>

</table>
</div>
<p>Movie data consist of movie id, their title, and genre they belong.</p>
</section>
<section id="preprocessing" class="level3">
<h3 class="anchored" data-anchor-id="preprocessing">Preprocessing</h3>
<p>As I mentioned before, to create a recommender system we need to start by creating an interaction matrix. For this task, we will use the <strong>create_interaction_matrix</strong> function from the recsys cookbook. This function requires you to input a pandas dataframe and necessary information like column name for user id, item id, and rating. It also takes an additional parameter <strong>threshold</strong> if norm=True which means any rating above the mentioned threshold is considered a positive rating. In our case, we don’t have to normalize our data, but in cases of retail data any purchase of a particular type of item can be considered a positive rating, quantity doesn’t matter.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Creating interaction matrix using rating data</span></span>
<span id="cb4-2">interactions <span class="op" style="color: #5E5E5E;">=</span> create_interaction_matrix(df <span class="op" style="color: #5E5E5E;">=</span> ratings,</span>
<span id="cb4-3">                                         user_col <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'userId'</span>,</span>
<span id="cb4-4">                                         item_col <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'movieId'</span>,</span>
<span id="cb4-5">                                         rating_col <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'rating'</span>)</span>
<span id="cb4-6">interactions.head()</span></code></pre></div>
<div>


<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
movieId
</th>
<th>
1
</th>
<th>
2
</th>
<th>
3
</th>
<th>
4
</th>
<th>
5
</th>
<th>
6
</th>
<th>
7
</th>
<th>
8
</th>
<th>
9
</th>
<th>
10
</th>
<th>
…
</th>
<th>
161084
</th>
<th>
161155
</th>
<th>
161594
</th>
<th>
161830
</th>
<th>
161918
</th>
<th>
161944
</th>
<th>
162376
</th>
<th>
162542
</th>
<th>
162672
</th>
<th>
163949
</th>
</tr>
<tr>
<th>
userId
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
1
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
…
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
2
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
4.0
</td>
<td>
…
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
3
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
…
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
4
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
4.0
</td>
<td>
…
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
<tr>
<th>
5
</th>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
4.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
…
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
<td>
0.0
</td>
</tr>
</tbody>

</table>
<p>
5 rows × 9066 columns
</p>
</div>
<p>As we can see the data is created in an interaction format where rows represent each user and columns represent each movie id with ratings as values. <br> We will also create user and item dictionaries to later convert user_id to user_name or movie_id to movie_name by using <strong>create_user_dict</strong> and <strong>create_item dict</strong> function.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Create User Dict</span></span>
<span id="cb5-2">user_dict <span class="op" style="color: #5E5E5E;">=</span> create_user_dict(interactions<span class="op" style="color: #5E5E5E;">=</span>interactions)</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;"># Create Item dict</span></span>
<span id="cb5-4">movies_dict <span class="op" style="color: #5E5E5E;">=</span> create_item_dict(df <span class="op" style="color: #5E5E5E;">=</span> movies,</span>
<span id="cb5-5">                               id_col <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'movieId'</span>,</span>
<span id="cb5-6">                               name_col <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'title'</span>)</span></code></pre></div>
</section>
<section id="building-matrix-factorization-model" class="level3">
<h3 class="anchored" data-anchor-id="building-matrix-factorization-model">Building Matrix Factorization model</h3>
<p>To build a matrix factorization model, we will use the <strong>runMF</strong> function which will take following input -<br>
- <strong>interaction matrix:</strong> Interaction matrix created in the previous section - <strong>n_components:</strong> Number of embedding generated for each user and item - <strong>loss:</strong> We need to define a loss function, in this case, we are using <a href="https://lyst.github.io/lightfm/docs/examples/warp_loss.html">warp loss</a> because we mostly care about the ranking of data, i.e, which items should we show first - <strong>epoch:</strong> Number of times to run - <strong>n_jobs:</strong> Number of cores to use in parallel processing</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">mf_model <span class="op" style="color: #5E5E5E;">=</span> runMF(interactions <span class="op" style="color: #5E5E5E;">=</span> interactions,</span>
<span id="cb6-2">                 n_components <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb6-3">                 loss <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'warp'</span>,</span>
<span id="cb6-4">                 epoch <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb6-5">                 n_jobs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
<p>Now we have built our matrix factorization model we can now do some interesting things. There are various use cases which can be solved by using this model for a web platform let’s look into them.</p>
</section>
<section id="usecase-1-item-recommendation-to-a-user" class="level3">
<h3 class="anchored" data-anchor-id="usecase-1-item-recommendation-to-a-user">Usecase 1: Item recommendation to a user</h3>
<p>In this use case, we want to show a user, items he might be interested in buying/viewing based on his/her interactions done in the past. Typical industry examples for this are like “Deals recommended for you” on Amazon or “Top pics for a user” on Netflix or personalized email campaigns. <img src="https://aayushmnit.github.io/posts/2018-04-17-Business_usecases_by_recommender_system_using_lightFM/user_item_recommendation.PNG"></p>
<p>We can use the <strong>sample_recommendation_user</strong> function for this case. This functions take matrix factorization model, interaction matrix, user dictionary, item dictionary, user_id and the number of items as input and return the list of item id’s a user may be interested in interacting.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">## Calling 10 movie recommendation for user id 11</span></span>
<span id="cb7-2">rec_list <span class="op" style="color: #5E5E5E;">=</span> sample_recommendation_user(model <span class="op" style="color: #5E5E5E;">=</span> mf_model, </span>
<span id="cb7-3">                                      interactions <span class="op" style="color: #5E5E5E;">=</span> interactions, </span>
<span id="cb7-4">                                      user_id <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">11</span>, </span>
<span id="cb7-5">                                      user_dict <span class="op" style="color: #5E5E5E;">=</span> user_dict,</span>
<span id="cb7-6">                                      item_dict <span class="op" style="color: #5E5E5E;">=</span> movies_dict, </span>
<span id="cb7-7">                                      threshold <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span>,</span>
<span id="cb7-8">                                      nrec_items <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb7-9">                                      show <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<pre><code>Known Likes:
1- The Hunger Games: Catching Fire (2013)
2- Gravity (2013)
3- Dark Knight Rises, The (2012)
4- The Hunger Games (2012)
5- Town, The (2010)
6- Exit Through the Gift Shop (2010)
7- Bank Job, The (2008)
8- Departed, The (2006)
9- Bourne Identity, The (1988)
10- Step Into Liquid (2002)
11- SLC Punk! (1998)
12- Last of the Mohicans, The (1992)
13- Good, the Bad and the Ugly, The (Buono, il brutto, il cattivo, Il) (1966)
14- Robin Hood: Prince of Thieves (1991)
15- Citizen Kane (1941)
16- Trainspotting (1996)
17- Pulp Fiction (1994)
18- Usual Suspects, The (1995)

 Recommended Items:
1- Dark Knight, The (2008)
2- Inception (2010)
3- Iron Man (2008)
4- Shutter Island (2010)
5- Fight Club (1999)
6- Avatar (2009)
7- Forrest Gump (1994)
8- District 9 (2009)
9- WALL·E (2008)
10- Matrix, The (1999)</code></pre>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;">print</span>(rec_list)</span></code></pre></div>
<pre><code>[593L, 260L, 110L, 480L, 47L, 527L, 344L, 858L, 231L, 780L]</code></pre>
<p>As we can see in this case user is interested in <em>“Dark Knight Rises(2012)”</em> so the first recommendation is <em>“The Dark Knight(2008)”</em>. This user also seems to have a strong liking towards movies in drama, sci-fi and thriller genre and there are many movies recommended in the same genre like Dark Knight(Drama/Crime), Inception(Sci-Fi, Thriller), Iron Man(Sci-FI thriller), Shutter Island(Drame/Thriller), Fight club(drama), Avatar(Sci-fi), Forrest Gump(Drama), District 9(Thriller), Wall-E(Sci-fi), The Matrix(Sci-Fi) <br></p>
<p>Similar models can also be used for building sections like “Based on your recent browsing history” recommendations by just changing the rating matrix only to contain interaction which is recent and based on browsing history visits on specific items.</p>
</section>
<section id="usecase-2-user-recommendation-to-a-item" class="level3">
<h3 class="anchored" data-anchor-id="usecase-2-user-recommendation-to-a-item">Usecase 2: User recommendation to a item</h3>
<p>In this use case, we will discuss how we can recommend a list of users specific to a particular item. Example of such cases is when you are running a promotion on an item and want to run an e-mail campaign around this promotional item to only 10,000 users who might be interested in this item.</p>
<p><img src="https://aayushmnit.github.io/posts/2018-04-17-Business_usecases_by_recommender_system_using_lightFM/item_user_recommendation.jpg"></p>
<p>We can use the <strong>sample_recommendation_item</strong> function for this case. This functions take matrix factorization model, interaction matrix, user dictionary, item dictionary, item_id and the number of users as input and return the list of user id’s who are more likely be interested in the item.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">## Calling 15 user recommendation for item id 1</span></span>
<span id="cb11-2">sample_recommendation_item(model <span class="op" style="color: #5E5E5E;">=</span> mf_model,</span>
<span id="cb11-3">                           interactions <span class="op" style="color: #5E5E5E;">=</span> interactions,</span>
<span id="cb11-4">                           item_id <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb11-5">                           user_dict <span class="op" style="color: #5E5E5E;">=</span> user_dict,</span>
<span id="cb11-6">                           item_dict <span class="op" style="color: #5E5E5E;">=</span> movies_dict,</span>
<span id="cb11-7">                           number_of_user <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">15</span>)</span></code></pre></div>
<pre><code>[116, 410, 449, 657, 448, 633, 172, 109, 513, 44, 498, 459, 317, 415, 495]</code></pre>
<p>As you can see function return a list of userID who might be interested in item id 1. Another example why you might need such model is when there is an old inventory sitting in your warehouse which needs to clear up otherwise you might have to write it off, and you want to clear it by giving some discount to users who might be interested in buying.</p>
</section>
<section id="usecase-3-item-recommendation-to-items" class="level3">
<h3 class="anchored" data-anchor-id="usecase-3-item-recommendation-to-items">Usecase 3: Item recommendation to items</h3>
<p>In this use case, we will discuss how we can recommend a list of items specific to a particular item. This kind of models will help you to find similar/related items or items which can be bundled together. Typical industry use case for such models are in cross-selling and up-selling opportunities on product page like “Products related to this item”, “Frequently bought together”, “Customers who bought this also bought this” and “Customers who viewed this item also viewed”. <br> <em>“Customers who bought this also bought this” and “Customers who viewed this item also viewed” can also be solved through market basket analysis.</em></p>
<p><img src="https://aayushmnit.github.io/posts/2018-04-17-Business_usecases_by_recommender_system_using_lightFM/crossell_bundling.PNG"></p>
<p>To achieve this use case, we will create a cosine distance matrix using item embeddings generated by matrix factorization model. This will help us calculate similarity b/w items, and then we can recommend top N similar item to an item of interest. First step is to create a item-item distance matrix using the <strong>create_item_emdedding_distance_matrix</strong> function. This function takes matrix factorization models and interaction matrix as input and returns an item_embedding_distance_matrix.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;">## Creating item-item distance matrix</span></span>
<span id="cb13-2">item_item_dist <span class="op" style="color: #5E5E5E;">=</span> create_item_emdedding_distance_matrix(model <span class="op" style="color: #5E5E5E;">=</span> mf_model,</span>
<span id="cb13-3">                                                       interactions <span class="op" style="color: #5E5E5E;">=</span> interactions)</span></code></pre></div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">## Checking item embedding distance matrix</span></span>
<span id="cb14-2">item_item_dist.head()</span></code></pre></div>
<div>


<table class="dataframe table table-sm table-striped">
<thead>
<tr>
<th>
movieId
</th>
<th>
1
</th>
<th>
2
</th>
<th>
3
</th>
<th>
4
</th>
<th>
5
</th>
<th>
6
</th>
<th>
7
</th>
<th>
8
</th>
<th>
9
</th>
<th>
10
</th>
<th>
…
</th>
<th>
161084
</th>
<th>
161155
</th>
<th>
161594
</th>
<th>
161830
</th>
<th>
161918
</th>
<th>
161944
</th>
<th>
162376
</th>
<th>
162542
</th>
<th>
162672
</th>
<th>
163949
</th>
</tr>
<tr>
<th>
movieId
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
1
</th>
<td>
1.000000
</td>
<td>
0.760719
</td>
<td>
0.491280
</td>
<td>
0.427250
</td>
<td>
0.484597
</td>
<td>
0.740024
</td>
<td>
0.486644
</td>
<td>
0.094009
</td>
<td>
-0.083986
</td>
<td>
0.567389
</td>
<td>
…
</td>
<td>
-0.732112
</td>
<td>
-0.297997
</td>
<td>
-0.451733
</td>
<td>
-0.767141
</td>
<td>
-0.501647
</td>
<td>
-0.270280
</td>
<td>
-0.455277
</td>
<td>
-0.292823
</td>
<td>
-0.337935
</td>
<td>
-0.636147
</td>
</tr>
<tr>
<th>
2
</th>
<td>
0.760719
</td>
<td>
1.000000
</td>
<td>
0.446414
</td>
<td>
0.504502
</td>
<td>
0.525171
</td>
<td>
0.572113
</td>
<td>
0.364393
</td>
<td>
0.290633
</td>
<td>
0.231926
</td>
<td>
0.653033
</td>
<td>
…
</td>
<td>
-0.748452
</td>
<td>
-0.307634
</td>
<td>
-0.165400
</td>
<td>
-0.526614
</td>
<td>
-0.146751
</td>
<td>
-0.156305
</td>
<td>
-0.223818
</td>
<td>
-0.138412
</td>
<td>
-0.209538
</td>
<td>
-0.733489
</td>
</tr>
<tr>
<th>
3
</th>
<td>
0.491280
</td>
<td>
0.446414
</td>
<td>
1.000000
</td>
<td>
0.627473
</td>
<td>
0.769991
</td>
<td>
0.544175
</td>
<td>
0.632008
</td>
<td>
0.336824
</td>
<td>
0.392284
</td>
<td>
0.510592
</td>
<td>
…
</td>
<td>
-0.331028
</td>
<td>
-0.264556
</td>
<td>
-0.308592
</td>
<td>
-0.285085
</td>
<td>
-0.046424
</td>
<td>
-0.165821
</td>
<td>
-0.183842
</td>
<td>
-0.143613
</td>
<td>
-0.156418
</td>
<td>
-0.378811
</td>
</tr>
<tr>
<th>
4
</th>
<td>
0.427250
</td>
<td>
0.504502
</td>
<td>
0.627473
</td>
<td>
1.000000
</td>
<td>
0.582582
</td>
<td>
0.543208
</td>
<td>
0.602390
</td>
<td>
0.655708
</td>
<td>
0.527346
</td>
<td>
0.471166
</td>
<td>
…
</td>
<td>
-0.380431
</td>
<td>
-0.163091
</td>
<td>
-0.232833
</td>
<td>
-0.334746
</td>
<td>
-0.052832
</td>
<td>
-0.266185
</td>
<td>
-0.158415
</td>
<td>
-0.211618
</td>
<td>
-0.232351
</td>
<td>
-0.469629
</td>
</tr>
<tr>
<th>
5
</th>
<td>
0.484597
</td>
<td>
0.525171
</td>
<td>
0.769991
</td>
<td>
0.582582
</td>
<td>
1.000000
</td>
<td>
0.354141
</td>
<td>
0.639958
</td>
<td>
0.396447
</td>
<td>
0.432026
</td>
<td>
0.385051
</td>
<td>
…
</td>
<td>
-0.273074
</td>
<td>
-0.280585
</td>
<td>
-0.306195
</td>
<td>
-0.265243
</td>
<td>
0.012961
</td>
<td>
-0.225142
</td>
<td>
-0.317043
</td>
<td>
-0.136875
</td>
<td>
-0.122382
</td>
<td>
-0.312858
</td>
</tr>
</tbody>

</table>
<p>
5 rows × 9066 columns
</p>
</div>
<p>As we can see the matrix have movies as both row and columns and the value represents the cosine distance between them. Next step is to use <strong>item_item_recommendation</strong> function to get top N items with respect to an item_id. This function takes item embedding distance matrix, item_id, item_dictionary and number of items to be recommended as input and return similar item list as output.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">## Calling 10 recommended items for item id </span></span>
<span id="cb15-2">rec_list <span class="op" style="color: #5E5E5E;">=</span> item_item_recommendation(item_emdedding_distance_matrix <span class="op" style="color: #5E5E5E;">=</span> item_item_dist,</span>
<span id="cb15-3">                                    item_id <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5378</span>,</span>
<span id="cb15-4">                                    item_dict <span class="op" style="color: #5E5E5E;">=</span> movies_dict,</span>
<span id="cb15-5">                                    n_items <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<pre><code>Item of interest :Star Wars: Episode II - Attack of the Clones (2002)
Item similar to the above item:
1- Star Wars: Episode III - Revenge of the Sith (2005)
2- Lord of the Rings: The Two Towers, The (2002)
3- Lord of the Rings: The Fellowship of the Ring, The (2001)
4- Lord of the Rings: The Return of the King, The (2003)
5- Matrix Reloaded, The (2003)
6- Harry Potter and the Sorcerer's Stone (a.k.a. Harry Potter and the Philosopher's Stone) (2001)
7- Gladiator (2000)
8- Spider-Man (2002)
9- Minority Report (2002)
10- Mission: Impossible II (2000)</code></pre>
<p>As we can see for “Star Wars: Episode II - Attack of the Clones (2002)” movie we are getting it’s next released movies which is “Star Wars: Episode III - Revenge of the Sith (2005)” as the first recommendation.</p>
</section>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>Like any other blog, this method isn’t perfect for every application, but the same ideas can work if we use it effectively. There is a lot of advancements in recommender systems with the advent of Deep learning. While there is room for improvement, I am pleased with how it has been working for me so far. I might write about deep learning based recommender systems later sometime.</p>
<p>In the meantime, I hope you enjoyed reading, and feel free to use my code to try it out for your purposes. Also, if there is any feedback on code or just the blog post, feel free to reach out on <a href="https://www.linkedin.com/in/aayushmnit/">LinkedIn</a> or email me at aayushmnit@gmail.com.</p>


</section>

 ]]></description>
  <category>Recommender System</category>
  <category>Machine learning</category>
  <category>Business</category>
  <guid>https://aayushmnit.github.io/posts/2018-04-17-Business_usecases_by_recommender_system_using_lightFM/index.html</guid>
  <pubDate>Tue, 17 Apr 2018 07:00:00 GMT</pubDate>
  <media:content url="https://aayushmnit.github.io/posts/2018-04-17-Business_usecases_by_recommender_system_using_lightFM/personalization_benefits.PNG" medium="image"/>
</item>
<item>
  <title>Website launch</title>
  <dc:creator>Aayush Agrawal</dc:creator>
  <link>https://aayushmnit.github.io/posts/2018-02-19-launch/index.html</link>
  <description><![CDATA[ 



<p>Finally got time to build my own website on <a href="https://github.com/">Github</a>. This is my first post and I would like to thank <a href="https://github.com/academicpages/academicpages.github.io">Academic Pages</a> which provided with a wonderful repository to help me get started with building this website.</p>
<p>I am intending to use this website to publish blogs, workshop and any material which would be releveant in Data science field.</p>
<p>Will see you guys in next post.</p>
<p>-Aayush</p>



 ]]></description>
  <category>launch</category>
  <category>announcement</category>
  <guid>https://aayushmnit.github.io/posts/2018-02-19-launch/index.html</guid>
  <pubDate>Mon, 19 Feb 2018 08:00:00 GMT</pubDate>
  <media:content url="https://aayushmnit.github.io/posts/2018-02-19-launch/launch.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
